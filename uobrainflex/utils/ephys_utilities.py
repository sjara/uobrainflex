# -*- coding: utf-8 -*-
"""
Created on Mon Mar 25 14:17:45 2024

@author: admin
"""

import numpy as np

def Find_TTL_timing_offset(TTL1,TTL2):
    """
    OpoenEphys generates TTL pulses even while not recording data. This function finds the pulse offset from recorede to generated data.
    Compares timing records between two TLL channels: one with the generated clock, another with pulses recored on separate hardware

    Args:
        TTL1 (array): Recorded TLL pulse timing.
        TTL2 (TYPE): Generative TTL pulse timing.

    Returns:
        TYPE (array): Number of pulses offset (ttl pulses not saved by labview)

    """
    TTL1_pos = np.where(np.diff(np.diff(TTL1))>.2)[0]
    TTL2_pos = np.where(np.diff(np.diff(TTL2))>.2)[0]
    positive_timing = TTL1_pos[len(TTL1_pos)-len(TTL2_pos):]-TTL2_pos

    TTL1_neg = np.where(np.diff(np.diff(TTL1))<-.2)[0]
    TTL2_neg = np.where(np.diff(np.diff(TTL2))<-.2)[0]
    negative_timing = TTL1_neg[len(TTL1_neg)-len(TTL2_neg):]-TTL2_neg
    return np.concatenate([positive_timing,negative_timing])

    
def correct_TDMS_TTL(TDMS_TTL,Ephys_TTL_samples,fs=30000,fs2=2500):
    """   
    Compare TTL records from Labview TDMS file with records from OpenEphys.
    Assumes no new OpenEphys TTL generation frequency fluctuations happened after recording is terminated
    Returns matched TTL pulses from TDMS file
    Returns [] if the offset is inconsistent pulse offset between TTL pulse timing switches
    
    Args:
        TDMS_TTL (array): timestamps of TTL pulses recorded in labview.
        Ephys_TTL_samples (array): sample numbers of positive event TTL pulses generated by openephys
        fs (float): sampling frequency to assume when dealing with OpenEphys TTL records
    Returns:
        corrected_TDMS_TTL (array): TDMS timestamps of TTL pulses, with any pulses before or after those recorded in Open Ephys dropped
    """
    Ephys_TTL = Ephys_TTL_samples/fs
    
    TTL_timing_offset = Find_TTL_timing_offset(TDMS_TTL,Ephys_TTL)
    
    if len(set(TTL_timing_offset))==1:
        corrected_TDMS_TTL = TDMS_TTL[TTL_timing_offset[0]:TTL_timing_offset[0]+len(Ephys_TTL)]
    else:
        Ephys_TTL = Ephys_TTL_samples/fs2
        TTL_timing_offset = Find_TTL_timing_offset(TDMS_TTL,Ephys_TTL)
        corrected_TDMS_TTL = TDMS_TTL[TTL_timing_offset[0]:TTL_timing_offset[0]+len(Ephys_TTL)]
        if len(set(TTL_timing_offset))!=1:
            print('ERROR -- LOST TTL PULSES!!')
            return []
    return corrected_TDMS_TTL
        
        
def sampling_frequency_noise_slope(TDMS_TTL,Ephys_TTL_samples,fs=30000):
    """   
    Compares TMDS TTL records and OpenEphys TTL records with input fs
    Finds the residual noise, timing offset, and slope of line fit to residual noise between TDMS TTL timing records and OpenEphys TTL timing with input fs assumption for OpenEphys 
    Returns the offset, residual noise, and slope of noise between TDMS and OpenEphys TTL timing
    
    Args:
        TDMS_TTL (array): timestamps of TTL pulses recorded in labview.
        Ephys_TTL_samples (array): sample numbers of positive event TTL pulses generated by openephys
        fs (float): sampling frequency to assume when dealing with OpenEphys TTL records
    Returns:
        offset (float): Offset time in seconds between TDMS and OpenEphys TTL records
        noise (array): Mean difference in timing between TDMS and OpenEphys TTL pulses
        error_slope (float): angle of line fit to residual noise
    """
    Ephys_TTL = Ephys_TTL_samples/fs
    TTL_diff = TDMS_TTL-Ephys_TTL
    offset = TTL_diff.mean()
    noise = TTL_diff-offset
    p = np.polyfit(range(len(noise)),noise, 1)
    error_slope=p[0]
    return offset, noise, error_slope  


def determine_Ephys_fs(TDMS_TTL,Ephys_TTL_samples,fs=30000):
    """   
    Iterates sampling frequency of OpenEphys recording to minimize slope of residual error between TDMS and OpenEphys TTL pulse timing
    
    Args:
        TDMS_TTL (array): timestamps of TTL pulses recorded in labview.
        Ephys_TTL_samples (array): sample numbers of positive event TTL pulses generated by openephys
        fs (float): initial sampling frequency to assume when dealing with OpenEphys TTL records
    Returns:
        fs (float): sampling frequency for OpenEphys that minimizes timing drift
    """
    err_slope = 1
    while abs(err_slope)>.0000000001:
        offset, noise, err_slope = sampling_frequency_noise_slope(TDMS_TTL,Ephys_TTL_samples,fs)
        fs = fs-err_slope*fs/3
    return fs